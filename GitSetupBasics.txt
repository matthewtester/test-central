Creating the central repository


* ssh into server, navigate to the proper place to store it, then git init --bare to create
   * clone this locally
* bare central repository to store everything in, local developer repositories are non-bare
* git clone
   * developers will clone the central repository for their development copy
   * cloning automatically connects back to the central repository
   * you can make a more traditional setup by designating a repository as central


Using git


* edit files in working directory, stage changes with git add, commit to project history with git commit
* staging area
   * buffer b/w working directory and central repository
   * groups related changes before committing to project history
   * encourages making small, focused commits for ease of reverting changes
* commit
   * commits staged snapshots from git add to project history
   * git commit -a commits all changes to files tracked with git add in the past to the working directory
   * commenting on commits
      * convention is to summarize on first line, then give a more detailed explanation in the present tense
* asd


Commands quick overview


* git init
   * initializes a git repository
* git status
   * shows current state of project
* git add
   * adds file to staging area, which makes git start tracking changes to it
   * git add ‘*.extension’
      * adds all files of given extension in current repository
   * git remote add <remote name> <repo url>
      * links to a remote repository to push local to
* git commit
   * stores staged changes to repository
* git log
   * tracks all changes so far
* git pull
   * pulls changes to main repository
* git push
   * git push -u origin master
      * names a branch
* git diff
   * shows differences between versions
   * git diff HEAD
      * shows diff of most recent commit
   * git diff --staged
      * shows diff of content currently in the staging area
* git reset <files>
   * unstages files
* git checkout
   * git checkout -- <target>
      * changes target files back to how they were last commit
   * git checkout <branch>
      * switches to branch, use git checkout master to return to main
* git branch <name>
   * creates a new branch, default is master
   * git branch -d <branch>
      * deletes branch
* git rm ‘file’
   * removes the files from disk, stages removal
* git merge <branch>
   * merges target branch with current branch
* git push
   * pushes local repo to remote
* git remote add origin
   * links to a remote repository by url